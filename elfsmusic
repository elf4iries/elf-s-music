-- youtube_music.lua
local basalt = require("basalt")
local speaker = peripheral.find("speaker")

if not speaker then
    error("Speaker nao encontrado!")
end

local searchResults = {}
local isPlaying = false
local isPaused = false
local audioResponse = nil

local SEARCH_API = "https://music.madefor.cc/search"
local CONVERTER_API = "https://music.madefor.cc/api/convert"

local c = {
    bg = colors.black,
    dark = colors.blue,
    med = colors.lightBlue,
    light = colors.cyan,
    white = colors.white,
    purple = colors.purple,
}

local main = basalt.createFrame()
main:setBackground(c.bg)

local searchFrame = main:addFrame()
searchFrame:setPosition(1, 1)
searchFrame:setSize("parent.w", "parent.h")
searchFrame:setBackground(c.bg)

local header = searchFrame:addLabel()
header:setText("YOUTUBE MUSIC PLAYER")
header:setPosition("center", 2)
header:setForeground(c.white)

local subtitle = searchFrame:addLabel()
subtitle:setText("Digite a musica:")
subtitle:setPosition(3, 5)
subtitle:setForeground(c.light)

local searchInput = searchFrame:addInput()
searchInput:setPosition(3, 6)
searchInput:setSize("parent.w - 4", 3)
searchInput:setBackground(c.dark)
searchInput:setForeground(c.white)

local searchButton = searchFrame:addButton()
searchButton:setText("BUSCAR")
searchButton:setPosition(3, 10)
searchButton:setSize(15, 3)
searchButton:setBackground(c.med)
searchButton:setForeground(c.bg)

local statusLabel = searchFrame:addLabel()
statusLabel:setText("")
statusLabel:setPosition(20, 11)
statusLabel:setForeground(c.light)

local resultsLabel = searchFrame:addLabel()
resultsLabel:setText("Resultados:")
resultsLabel:setPosition(3, 14)
resultsLabel:setForeground(c.purple)

local resultsList = searchFrame:addList()
resultsList:setPosition(3, 15)
resultsList:setSize("parent.w - 4", "parent.h - 15")
resultsList:setBackground(c.dark)
resultsList:setForeground(c.white)

resultsLabel:setVisible(false)
resultsList:setVisible(false)

local playerFrame = main:addFrame()
playerFrame:setPosition(1, 1)
playerFrame:setSize("parent.w", "parent.h")
playerFrame:setBackground(c.bg)
playerFrame:setVisible(false)

local playerHeader = playerFrame:addLabel()
playerHeader:setText("TOCANDO AGORA")
playerHeader:setPosition("center", 2)
playerHeader:setForeground(c.light)

local playerTitle = playerFrame:addLabel()
playerTitle:setText("")
playerTitle:setPosition(3, 5)
playerTitle:setForeground(c.white)

local playerArtist = playerFrame:addLabel()
playerArtist:setText("")
playerArtist:setPosition(3, 6)
playerArtist:setForeground(c.light)

local playerStatus = playerFrame:addLabel()
playerStatus:setText("")
playerStatus:setPosition(3, 8)
playerStatus:setForeground(c.purple)

-- Barra de progresso usando Label
local progressLabel = playerFrame:addLabel()
progressLabel:setText("Progresso:")
progressLabel:setPosition(3, 10)
progressLabel:setForeground(c.light)

local progressBar = playerFrame:addLabel()
progressBar:setText("[----------]")
progressBar:setPosition(3, 11)
progressBar:setForeground(c.med)

local progressText = playerFrame:addLabel()
progressText:setText("0%")
progressText:setPosition(18, 11)
progressText:setForeground(c.light)

local pauseButton = playerFrame:addButton()
pauseButton:setText("|| PAUSAR")
pauseButton:setPosition(3, 13)
pauseButton:setSize(15, 3)
pauseButton:setBackground(c.med)
pauseButton:setForeground(c.bg)

local stopButton = playerFrame:addButton()
stopButton:setText("[] PARAR")
stopButton:setPosition(20, 13)
stopButton:setSize(15, 3)
stopButton:setBackground(c.purple)
stopButton:setForeground(c.white)

local backButton = playerFrame:addButton()
backButton:setText("< VOLTAR")
backButton:setPosition(3, 17)
backButton:setSize(12, 3)
backButton:setBackground(c.dark)
backButton:setForeground(c.light)

-- Atualiza barra de progresso visual
local function updateProgressBar(percent)
    local filled = math.floor(percent / 10)
    local empty = 10 - filled
    local bar = "[" .. string.rep("=", filled) .. string.rep("-", empty) .. "]"
    progressBar:setText(bar)
    progressText:setText(percent .. "%")
end

local function searchYouTube(query)
    statusLabel:setText("Buscando...")
    resultsLabel:setVisible(false)
    resultsList:setVisible(false)
    searchResults = {}
    
    basalt.schedule(function()
        local url = SEARCH_API .. "?q=" .. textutils.urlEncode(query)
        local ok, response = pcall(http.get, url, nil, true)
        
        statusLabel:setText("")
        
        if not ok or not response then
            resultsList:clear()
            resultsList:addItem("Erro ao conectar")
            resultsList:setVisible(true)
            resultsLabel:setVisible(true)
            return
        end
        
        local data = response.readAll()
        response.close()
        
        local results = textutils.unserialiseJSON(data)
        
        if not results or #results == 0 then
            resultsList:clear()
            resultsList:addItem("Nenhum resultado")
            resultsList:setVisible(true)
            resultsLabel:setVisible(true)
            return
        end
        
        searchResults = results
        resultsList:clear()
        
        for i = 1, math.min(10, #results) do
            resultsList:addItem(results[i].title)
        end
        
        resultsList:setVisible(true)
        resultsLabel:setVisible(true)
    end)
end

local function playVideo(video)
    searchFrame:setVisible(false)
    playerFrame:setVisible(true)
    
    playerTitle:setText(video.title)
    playerArtist:setText(video.channel)
    playerStatus:setText("Convertendo...")
    updateProgressBar(0)
    isPaused = false
    
    basalt.schedule(function()
        local url = CONVERTER_API .. "?id=" .. video.id
        local ok, response = pcall(http.get, url, nil, true)
        
        if not ok or not response then
            playerStatus:setText("Erro ao converter")
            return
        end
        
        audioResponse = response
        playerStatus:setText("Tocando...")
        isPlaying = true
        
        local decoder = require("cc.audio.dfpwm").make_decoder()
        local prog = 0
        
        while isPlaying and audioResponse do
            if not isPaused then
                local chunk = audioResponse.read(16 * 1024)
                
                if not chunk then
                    playerStatus:setText("Finalizado!")
                    isPlaying = false
                    updateProgressBar(100)
                    break
                end
                
                local buffer = decoder(chunk)
                
                while not speaker.playAudio(buffer) and isPlaying and not isPaused do
                    os.pullEvent("speaker_audio_empty")
                end
                
                prog = prog + 1
                if prog % 5 == 0 then
                    local currentProg = tonumber(progressText:getText():match("%d+")) or 0
                    local newProg = math.min(100, currentProg + 2)
                    updateProgressBar(newProg)
                end
            else
                sleep(0.1)
            end
        end
        
        if audioResponse then
            audioResponse.close()
            audioResponse = nil
        end
    end)
end

searchButton:onClick(function()
    local query = searchInput:getValue()
    if query ~= "" then
        searchYouTube(query)
    end
end)

searchInput:onKey(function(self, event, key)
    if key == keys.enter then
        local query = searchInput:getValue()
        if query ~= "" then
            searchYouTube(query)
        end
    end
end)

resultsList:onSelect(function(self)
    local idx = self:getItemIndex()
    if idx > 0 and searchResults[idx] then
        playVideo(searchResults[idx])
    end
end)

pauseButton:onClick(function()
    isPaused = not isPaused
    if isPaused then
        pauseButton:setText("> CONTINUAR")
        playerStatus:setText("Pausado")
    else
        pauseButton:setText("|| PAUSAR")
        playerStatus:setText("Tocando...")
    end
end)

stopButton:onClick(function()
    isPlaying = false
    isPaused = false
    if audioResponse then
        audioResponse.close()
        audioResponse = nil
    end
    playerStatus:setText("Parado")
    updateProgressBar(0)
end)

backButton:onClick(function()
    isPlaying = false
    if audioResponse then
        audioResponse.close()
        audioResponse = nil
    end
    playerFrame:setVisible(false)
    searchFrame:setVisible(true)
    resultsList:clear()
    resultsList:setVisible(false)
    resultsLabel:setVisible(false)
    searchInput:setValue("")
end)

if not http then
    local err = main:addLabel()
    err:setText("HTTP DESABILITADO!")
    err:setPosition("center", "center")
    err:setForeground(colors.red)
end

basalt.autoUpdate()
