--[[
    YouTube Music Player (Basalt UI)
    Versão com verificação de instalação do music
]]

-- Verificar Basalt
if not fs.exists("/basalt") then
    print("Instalando Basalt...")
    shell.run("wget", "run", "https://raw.githubusercontent.com/Pyroxenium/Basalt2/main/install.lua")
end

-- Carregar Basalt
local basalt = require("basalt")

-- Criar janela principal
local main = basalt.createFrame()
main:setBackground(colors.black)

-- Título
local title = main:addLabel()
title:setText("YOUTUBE MUSIC PLAYER")
title:setPosition(2, 2)
title:setForeground(colors.white)

-- Campo de URL
local urlLabel = main:addLabel()
urlLabel:setText("URL do YouTube:")
urlLabel:setPosition(2, 4)
urlLabel:setForeground(colors.cyan)

local urlInput = main:addInput()
urlInput:setPosition(2, 5)
urlInput:setSize(35, 1)
urlInput:setBackground(colors.blue)
urlInput:setForeground(colors.white)

-- Botões
local playBtn = main:addButton()
playBtn:setText("TOCAR")
playBtn:setPosition(2, 7)
playBtn:setSize(8, 3)
playBtn:setBackground(colors.green)
playBtn:setForeground(colors.black)

local stopBtn = main:addButton()
stopBtn:setText("PARAR")
stopBtn:setPosition(12, 7)
stopBtn:setSize(8, 3)
stopBtn:setBackground(colors.red)
stopBtn:setForeground(colors.black)

-- Status
local status = main:addLabel()
status:setText("Pronto")
status:setPosition(2, 11)
status:setForeground(colors.lime)

-- Variável para controle do player
local playing = false

-- Verificar e instalar o programa music se necessário
local function checkMusic()
    if not fs.exists("music") then
        status:setText("Baixando music player...")
        local success = shell.run("wget", "https://music.madefor.cc/music.lua", "music")
        if success then
            status:setText("Music player instalado.")
        else
            status:setText("Erro ao baixar music player.")
        end
    end
end

-- Chamar a verificação ao iniciar
checkMusic()

-- Função simplificada para tocar música
local function playMusic(url)
    if playing then
        status:setText("Ja esta tocando musica")
        return
    end
    
    if not url or url == "" then
        status:setText("Digite uma URL")
        return
    end
    
    status:setText("Iniciando...")
    playing = true

    -- Executar o comando music play em um thread separado para não travar a interface
    local function runMusic()
        shell.run("music", "play", url)
        playing = false
        status:setText("Reproducao concluida")
    end

    -- Iniciar a thread
    parallel.waitForAny(runMusic, function()
        while playing do
            local event = os.pullEvent("terminate")
            if event == "terminate" then
                -- Encerrar o processo de música (não há uma maneira direta, então usamos o evento)
                break
            end
        end
    end)
end

-- Função para parar
local function stopMusic()
    if not playing then
        status:setText("Nao esta tocando")
        return
    end

    -- Envia um evento terminate para parar a thread de reprodução
    os.queueEvent("terminate")
    playing = false
    status:setText("Parando...")
end

-- Eventos dos botões
playBtn:onClick(function()
    local url = urlInput:getValue()
    playMusic(url)
end)

stopBtn:onClick(function()
    stopMusic()
end)

-- Instruções
local help = main:addLabel()
help:setText("Use: music play <url>")
help:setPosition(2, 13)
help:setForeground(colors.gray)

-- Iniciar
basalt.autoUpdate()
